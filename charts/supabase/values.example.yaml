secret:
  studio:
    username: supabase
    password: this_password_is_insecure_and_should_be_updated
  jwt:
    anonKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJhbm9uIiwKICAgICJpc3MiOiAic3VwYWJhc2UtZGVtbyIsCiAgICAiaWF0IjogMTY0MTc2OTIwMCwKICAgICJleHAiOiAxNzk5NTM1NjAwCn0.dc_X5iR_VP_qT0zsiyj_I_OZ2T9FtRU2BBNWN8Bu4GE
    serviceKey: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyAgCiAgICAicm9sZSI6ICJzZXJ2aWNlX3JvbGUiLAogICAgImlzcyI6ICJzdXBhYmFzZS1kZW1vIiwKICAgICJpYXQiOiAxNjQxNzY5MjAwLAogICAgImV4cCI6IDE3OTk1MzU2MDAKfQ.DaYlNEoUrrEn2Ig7tqibS-PHK5vgusbcbo7X36XVt4Q
    secret: your-super-secret-jwt-token-with-at-least-32-characters-long
  smtp:
    username: your-mail@example.com
    password: example123456
  analytics:
    apiKey: your-super-secret-and-long-logflare-key
  db:
    username: postgres
    password: example123456
    database: postgres

studio:
  image:
    tag: 20250224-d10db0f
  environment:
    STUDIO_DEFAULT_ORGANIZATION: "My Organization"
    STUDIO_DEFAULT_PROJECT: "My Project"
    SUPABASE_PUBLIC_URL: http://example.com/
    NEXT_PUBLIC_ENABLE_LOGS: "true"
  livenessProbe:
    httpGet:
      path: /api/platform/profile
      port: 3000
    initialDelaySeconds: 3

kong:
  image:
    repository: kong
    tag: 2.8.1
  environment:
    KONG_DECLARATIVE_CONFIG: /usr/local/kong/kong.yml
    KONG_LOG_LEVEL: info
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /
    tls:
      []
      # - secretName: example-ingress-tls
      #   hosts:
      #     - example.com
    hosts:
      - host: example.com
        paths:
          - path: /
            pathType: Prefix

auth:
  image:
    tag: v2.169.0
  environment:
    API_EXTERNAL_URL: http://example.com
    GOTRUE_SITE_URL: http://example.com
    GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
    GOTRUE_MAILER_AUTOCONFIRM: "true"
    GOTRUE_SMTP_ADMIN_EMAIL: "your-mail@example.com"
    GOTRUE_SMTP_HOST: "smtp.example.com"
    GOTRUE_SMTP_PORT: "587"
    GOTRUE_SMTP_SENDER_NAME: "your-mail@example.com"

rest:
  image:
    tag: v12.2.8

realtime:
  image:
    tag: v2.34.31
  livenessProbe:
    httpGet:
      path: /
      port: 4000
    initialDelaySeconds: 3

storage:
  image:
    tag: v1.9.1
  livenessProbe:
    httpGet:
      path: /status
      port: 5000
    initialDelaySeconds: 3
  persistence:
    enabled: false

imgproxy:
  image:
    tag: v3.8.0
  environment:
    IMGPROXY_ENABLE_WEBP_DETECTION: "true"
  livenessProbe:
    exec:
      command:
        - imgproxy
        - health
    initialDelaySeconds: 3
  persistence:
    enabled: false

meta:
  image:
    tag: v0.86.0

functions:
  image:
    tag: v1.67.2

analytics:
  image:
    tag: 1.11.0
  livenessProbe:
    httpGet:
      path: /health
      port: 4000
    initialDelaySeconds: 3

db:
  enabled: true
  image:
    tag: 15.8.1.044
  livenessProbe:
    exec:
      command:
        - pg_isready
        - -U
        - postgres
    initialDelaySeconds: 3
  persistence:
    enabled: false

vector:
  image:
    tag: 0.34.0-alpine
  livenessProbe:
    httpGet:
      path: /health
      port: 9001
    initialDelaySeconds: 3
  ## Vector requires logs from the control plane to function.
  ## This is normally stored in /var/log/pods
  ## Modify these values according to your environment.
  volumeMounts:
    - name: pod-logs
      mountPath: /var/log/pods
  volumes:
    - name: pod-logs
      hostPath:
        path: /var/log/pods
